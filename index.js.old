const HTMLParser = require('node-html-parser');
const request = require('request');
const md5 = require('md5');
require('dotenv').config()

let currentMentionId = 0;
let responseId = 0;

const token = process.env.MASTODON_ACCESS_TOKEN
const appid = process.env.BAIDU_TRANSLATE_APPID
const key = process.env.BAIDU_TRANSLATE_KEY

function main() {
  const getNotificationsOptions = {
    method: 'GET',
    url: 'https://erica.moe/api/v1/notifications',
    headers: {
      'Authorization': token,
      'Content-Type': 'multipart/form-data'
    },
    formData: { limit: '1' }
  };
  request(getNotificationsOptions, function (error, _response, body) {
    if (error) {
      throw new Error(error);
    }
    const responseObject = JSON.parse(body)[0]
    responseId = responseObject.status?.id
    const username = responseObject.account?.username
    const content = responseObject.status?.content
    const tagsArray = responseObject.status?.tags
    const command = tagsArray?.[0].name
    const replyToId = responseObject.status?.in_reply_to_id
    if (responseId != currentMentionId) {
      if (responseObject.type == 'mention') {
        if (tagsArray.length != 1) {
          postStatus("我比较傻，只能听懂不多不少一个命令 :blobmiou:", username)
        }
        else if (command == 'techo') {
          commandEcho(content, username)
        }
        else if (command == 'thelp') {
          commandHelp(username)
        }
        else if (command == 'ttrans') {
          commandTranslate(username, replyToId)
        }
        else {
          postStatus("这个命令 @e 没教过我，怪他咯～ :blobmiou:", username)
        }
      }
      else if (responseObject.type == 'follow') {
        postStatus("Teal Bot 现在好开心，因为被你 follow 啦！ :blobcatrainbow: \n\
        发布一则内容为 @teal #thelp 的嘟文来查看我的技能！", username)
      }
    }
    currentMentionId = responseId
  }
  );
  setTimeout(main, 1000);
}



async function postStatus(message, atUser) {
  const content = atUser ? "@" + atUser + " " + message : message
  const postStatusOptions = {
    method: 'POST',
    url: 'https://erica.moe/api/v1/statuses',
    headers: {
      'Authorization': token,
      'Content-Type': 'multipart/form-data'
    },
    formData: { status: content, in_reply_to_id: responseId }
  };
  request(postStatusOptions, function (error, _response, body) {
    if (error) throw new Error(error);
    console.log(body);
  });
}

async function commandEcho(content, atUser) {
  const message = "刚才，猫猫 " + "@" + atUser + " " + "对我说：\n" +
    stripeContent(content, "#techo")
  postStatus(message, undefined)
}

async function commandTranslate() {
  let originalText = ""
  async function getStatusContent(statusId) {
    console.log(statusId)
    const getStatusOptions = {
      method: 'GET',
      url: 'https://erica.moe/api/v1/statuses/' + statusId,
      headers: { Authorization: token }
    }
    request(getStatusOptions, function (error, _response, body) {
      if (error) throw new Error(error);
      originalText = stripeContent(JSON.parse(body).content)
    });
  }
  await getStatusContent(sourceId)
  const randNum = getRandomInt(1, 99999);
  const sign = md5(appid + originalText + randNum + key);
  const getTranslateOptions = {
    method: 'GET',
    url: 'https://fanyi-api.baidu.com/api/trans/vip/translate',
    qs: {
      q: stripeContent(originalText),
      from: 'auto',
      to: 'zh',
      appid: appid,
      salt: randNum,
      sign: sign
    }
  };
  request(getTranslateOptions, function (error, _response, body) {
    if (error) throw new Error(error);
    console.log(body);
    const translatedObject = JSON.parse(body)
    if (translatedObject.error_code) {
      const errorReport = "百度翻译 API 报错啦。以下是错误信息：\n" +
        translatedObject.error_code + " " + translatedObject.error_msg
      postStatus(errorReport, atUser)
    }
    else {
      postStatus(translatedObject.trans_result[0].dst, atUser)
    }
  }
  )
}

function stripeContent(rawContent) {
  const root = HTMLParser.parse(rawContent);
  const hashAndTagRegex = /([@#][\w_-]+)/g
  const content = root.textContent.replace(hashAndTagRegex, "").trimStart()
  return content
}

async function commandHelp(atUser) {
  let message =
    "Teal Bot 是 @e 的还在开发中的的目前不知道作用是什么的机器人。\n\
\n\
:blobcatglowsticks: :blobcatglowsticks: :blobcatglowsticks: :blobcatglowsticks: :blobcatglowsticks: \
:blobcatglowsticks: :blobcatglowsticks: :blobcatglowsticks: :blobcatglowsticks: :blobcatglowsticks: \n\
\n\
用法：\n\
@teal #命令 内容\n\
为了不污染标签环境，所有命令都有个额外的字母“t”作开头。\n\
其中 #命令 目前可以是：\n\
\n\
#thelp: 显示本则帮助\n\
#techo: 把你在 #techo 之后跟随的内容发回给你看（没错，就是这么傻）\n"
  postStatus(message, atUser)
}

function getRandomInt(min, max) {
  const realMin = Math.ceil(min);
  const realMax = Math.floor(max);
  return Math.floor(Math.random() * (realMax - realMin) + realMin);
}

main()